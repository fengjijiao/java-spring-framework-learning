<?xml version="1.0" encoding="UTF-8"?>
<!--beans.xml用于给不同的bean分配唯一的ID，并给相应的bean属性赋值。例如，我们可以在不影响其他类的情况下，给message变量赋值。-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--启用注释-->
    <context:annotation-config/>
    <!--    first-->
    <bean id="helloWorld" class="us.fjj.spring.learning.HelloWorld">
        <property name="message" value="Hello World!"/>
    </bean>
<!--    依赖注入-->
<!--    构造函数方式-->
    <bean id="man" class="us.fjj.spring.learning.DependencyInjection.Man">
        <constructor-arg value="laokai"/>
        <constructor-arg value="3" type="int"/>
    </bean>
    <bean id="person" class="us.fjj.spring.learning.DependencyInjection.Person">
        <constructor-arg ref="man" type="us.fjj.spring.learning.DependencyInjection$Man"/>
    </bean>
<!--    setter方式-->
    <bean id="man2" class="us.fjj.spring.learning.DependencyInjection2.Man">
        <property name="age" value="3"/>
        <property name="name" value="laokai"/>
    </bean>
    <bean id="person2" class="us.fjj.spring.learning.DependencyInjection2.Person">
        <property name="man" ref="man2"/>
    </bean>

<!--    注入内部bean-->
    <bean id="person3" class="us.fjj.spring.learning.DependencyInjection2.Person">
        <property name="man">
            <bean class="us.fjj.spring.learning.DependencyInjection2.Man">
                <property name="name" value="laokai"/>
                <property name="age" value="3"/>
            </bean>
        </property>
    </bean>

<!--    注入集合-->
    <bean id="javaCollection" class="us.fjj.spring.learning.JavaCollection">
        <property name="list">
            <list>
                <ref bean="man"/>
                <ref bean="man2"/>
                <value>www.google.com</value>
                <value>www.google.com.hk</value>
                <value>www.google.com.sg</value>
                <value>www.google.co.uk</value>
                <value>www.google.tk</value>
                <value>www.google.tk</value>
                <value>www.google.tk</value>
            </list>
        </property>
        <property name="set">
            <set>
<!--                不能重复-->
                <ref bean="man"/>
                <ref bean="man2"/>
                <value>www.google.com</value>
                <value>www.google.com.hk</value>
                <value>www.google.com.sg</value>
                <value>www.google.co.uk</value>
                <value>www.google.co.au</value>
                <value>www.google.tk</value>
            </set>
        </property>
        <property name="map">
            <map>
<!--                key,value可为任意类型-->
                <entry key="0" value-ref="man"/>
                <entry key-ref="man" value-ref="man2"/>
                <entry key="1" value="www"/>
                <entry key="2" value="google"/>
                <entry key="3" value="com"/>
            </map>
        </property>
        <property name="props">
            <props>
<!--                key, value均为字符串-->
                <prop key="one">www</prop>
                <prop key="two">google</prop>
                <prop key="three">tk</prop>
            </props>
        </property>
    </bean>

<!--    <bean id="man4" class="us.fjj.spring.learning.DependencyInjection2.Man">-->
<!--&lt;!&ndash;        传入空字符串的值&ndash;&gt;-->
<!--        <property name="name" value=""/>-->
<!--&lt;!&ndash;        传入null&ndash;&gt;-->
<!--        <property name="age"><null/></property>-->
<!--    </bean>-->

<!--    Qualifier注释Demo-->
    <bean id="profile" class="us.fjj.spring.learning.QualifierDemo.Profile"/>
    <bean id="student1" class="us.fjj.spring.learning.QualifierDemo.Student">
        <property name="name" value="loakia"/>
        <property name="id" value="12138"/>
    </bean>

<!--    annotation demo-->
<!--    使用context命名空间，通知spring扫描指定目录，进行注解的解析-->
    <context:component-scan base-package="us.fjj.spring.learning"/>


<!--    aop demo-->
<!--    用于注解扫描-->
    <context:component-scan base-package="us.fjj.spring.learning.aopdemo"/>
<!--    使切面开启自动代理-->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
<!--    AOP编程-->
        <aop:config>
            <aop:aspect ref="myAspect">
<!--                配置切入点，通知最后增强哪些方法-->
<!--                Spring AOP表达式的写法：-->

<!--                任意公共方法的执行：-->
<!--                execution(public * *(..))-->
<!--                ##public可以省略, 第一个* 代表方法的任意返回值 第二个参数代表任意包+类+方法 （..）表示任意参数-->

<!--                任何一个以“get”开始的方法的执行：-->
<!--                execution(* get*(..))-->

<!--                UserService接口的任意方法：-->
<!--                execution(* com.einblatt.service.UserService.*(..))-->

<!--                定义在com.einblatt.service包里的任意方法的执行：-->
<!--                execution(* com.einblatt.service.*.*(..))-->
<!--                #第一个 .* 代表任意类, 第二个 .* 代表任意方法-->

<!--                定义在service包和所有子包里的任意类的任意方法的执行：-->
<!--                execution(* com.einblatt.service..*.*(..))-->
<!--                # ..* 代表任意包或者子包-->

<!--                定义在com.einblatt包和所有子包里的UserService类的任意方法的执行：-->
<!--                execution(* com.einblatt..UserService.*(..))-->

                <aop:pointcut expression="execution (* us.fjj.spring.learning.aopdemo.*.* (..))" id="myPointCut"/>
<!--                前置通知，关联通知Advice和切入点PointCut-->
                <aop:before method="myBefore" pointcut-ref="myPointCut"/>
<!--                后置通知，在方法返回之后执行，就可以获得返回值returning属性-->
                <aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="returnVal"/>
<!--                环绕通知-->
                <aop:around method="myAround" pointcut-ref="myPointCut"/>
<!--                抛出通知：用于处理程序发生异常，可以接收当前方法产生的异常-->
<!--                *注意：如果程序没有异常，则不会执行增强-->
<!--                *throwing属性: 用于设置通知第二个参数的名称，类型Throwable-->
                <aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/>
<!--                最终通知：无论程序发生任何事情，都将执行-->
                <aop:after method="myAfter" pointcut-ref="myPointCut"/>
            </aop:aspect>
        </aop:config>
</beans>